Whenever it(hashcode) is invoked on the same object more than once during an execution of a Java application, 
the hashCode method must consistently return the same integer, provided no information used in equals comparisons 
on the object is modified. This integer need not remain consistent from one execution of an application to another 
execution of the same application.

If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the 
two objects must produce the same integer result.

It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the 
hashCode method on each of the two objects must produce distinct integer results. However, the programmer should 
be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.

In this case we override both methods properly.
When we call map.put(g1, “CSE”); it will hash to some bucket location and when we call map.put(g2, “IT”);, 
it will generates same hashcode value (same as g1) and replace first value by second value because while iterating 
over same bucket it found a k such that k.equals(g2) is true, means searching key already exist.

 So, it replaces old value of that key by new value.