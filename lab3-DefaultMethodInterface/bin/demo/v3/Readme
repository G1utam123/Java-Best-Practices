Abstract Class vs Java 8 Interface

After having default and static methods inside the interface, we think about the need of 
abstract class in Java. 

An interface and an abstract class is almost similar except that you can create constructor 
in the abstract class whereas you can't do this in interface.



Why interfaces can not have the constructor?

An Interface is a complete abstraction of class. All data members present in the interface are by default public, 
static, and final. All the static final fields should be assigned values at the time of declaration, otherwise it 
will throw compilation error saying “variable variable_Name not initialized in default constructor”.

The methods inside the interface are by default public abstract which means the method implementation 
cannot be provided by the interface itself, it has to be provided by the implementing class. Therefore, no 
need of having a constructor inside the interface.

A constructor is used to initializing non-static data members and as there are no non-static data members 
in the interface, there is no need of constructor

Constructor in Java Abstract Class?

Constructor is always called by its class name in a class itself. A constructor is used to initialize an object not to build 
the object. As we all know abstract classes also do have a constructor. So if we do not define any constructor inside 
the abstract class then JVM (Java Virtual Machine) will give a default constructor to the abstract class. If we want to 
know how to define user define constructors like constructors with argument or any kind of constructor inside the 
abstract class then you should follow the given procedure.


